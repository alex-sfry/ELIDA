{"version":3,"sources":["CustomSelect/assets/CustomSelect.js"],"names":["CustomSelect","constructor","config","console","log","this","itemsToSubmitSelect","document","querySelector","toSubmit","closest","label","container","initDropdownValues","setSelectedItemsDivMsg","setEventListeners","classList","selectedItemsDiv","querySelectorAll","forEach","selectedItem","getDropdownListItems","find","filterMethod","trim","textContent","add","handleDropdownInput","item","toLowerCase","startsWith","e","target","value","handleDropdownItemClick","remove","selectedItemDivider","includes","hiddenOption","selItm","createElement","innerHTML","handleDeleteSelectedItem","selItmDiv","optionToDelete","deletedItem","placeholder","clickedItem","elemVisible","appendChild","optionItem","elemLabel","matches","isValidated","setInvalid","setValid","commoditiesSearchField","addEventListener","dropdownList","elemHidden","selectedItems","elem","checkValidity","search","form","length"],"mappings":"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","file":"CustomSelect.min.js","sourcesContent":["class CustomSelect {\r\n    constructor(config) {\r\n        if (!config) return console.log('provide config for CustomSelect');\r\n        this.config = config;\r\n\r\n        this.selectedItemsDiv = document.querySelector(`#${config.container} .selected-items`);\r\n        this.itemsToSubmitSelect = document.querySelector(`#${config.toSubmit}`);\r\n        this.form = this.itemsToSubmitSelect.closest('form');\r\n        this.label = document.querySelector(`#${config.container} label[for=${config.toSubmit}]`);\r\n\r\n        this.initDropdownValues();\r\n        this.setEventListeners();\r\n        this.setSelectedItemsDivMsg();\r\n    }\r\n\r\n    initDropdownValues() {\r\n        const selectedItems = this.selectedItemsDiv.querySelectorAll('div');\r\n\r\n        selectedItems.forEach(selectedItem => {\r\n            const dropdownItemsToHide = [...this.getDropdownListItems()]\r\n                .find(item => item.textContent.trim() === selectedItem.textContent.trim());\r\n            dropdownItemsToHide.classList.add('d-none');\r\n        });\r\n    };\r\n\r\n    handleDropdownInput(e) {\r\n        console.log(this.config.filterMethod)\r\n        if (this.config.filterMethod === 'startsWith') {\r\n            this.getDropdownListItems().forEach(item => {\r\n                !item.textContent.toLowerCase().trim().startsWith(e.target.value.toLowerCase().trim()) ?\r\n                    item.classList.add('hidden') :\r\n                        item.classList.remove('hidden');\r\n            })\r\n        }else if (this.config.filterMethod === 'includes') {\r\n            this.getDropdownListItems().forEach(item => {\r\n                !item.textContent.toLowerCase().trim().includes(e.target.value.toLowerCase().trim()) ?\r\n                    item.classList.add('hidden') :\r\n                        item.classList.remove('hidden');\r\n            })\r\n        }\r\n    };\r\n\r\n    handleDropdownItemClick(e) {\r\n        if (!e.target.classList.contains('c-list-item')) return;\r\n\r\n        if (this.itemsToSubmitSelect.querySelectorAll('option').length === 5) return;\r\n\r\n        const selectedItemDivider = `\r\n            <span class=\"border-start border-1 border-black\"></span>\r\n            <button class=\"close border-0 rounded-2 m-0 p-0\" type=\"button\" aria-label=\"Close\">\r\n                <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"20\" height=\"20\" fill=\"currentColor\" class=\"svg-close bi bi-x\" viewBox=\"0 0 16 16\">\r\n                    <path d=\"M4.646 4.646a.5.5 0 0 1 .708 0L8 7.293l2.646-2.647a.5.5 0 0 1 .708.708L8.707 8l2.647 2.646a.5.5 0 0 1-.708.708L8 8.707l-2.646 2.647a.5.5 0 0 1-.708-.708L7.293 8 4.646 5.354a.5.5 0 0 1 0-.708\"/>\r\n                </svg>\r\n            </button>\r\n        `;\r\n\r\n        const hiddenOption = document.querySelector(`#${this.config.toSubmit} option`) ?\r\n            document.querySelector(`#${this.config.toSubmit} option[value=\"${e.target.textContent.trim()}\"]`) :\r\n            null;\r\n\r\n        const selItm = document.createElement('div');\r\n        selItm.classList.add('ps-1', 'rounded-2', 'bg-info');\r\n        selItm.innerHTML = e.target.textContent + selectedItemDivider;\r\n\r\n        if (this.selectedItemsDiv.textContent === this.config.placeholder) this.selectedItemsDiv.textContent = '';\r\n        this.selectedItemsDiv.appendChild(selItm);\r\n\r\n        const clickedItem =\r\n            [...this.getDropdownListItems()].find(item => item.textContent.trim() === e.target.textContent.trim());\r\n        clickedItem && clickedItem.classList.add('d-none');\r\n\r\n        if (!hiddenOption) {\r\n            const optionItem = document.createElement('option');\r\n            optionItem.setAttribute('value', e.target.textContent.trim());\r\n            optionItem.setAttribute('selected', '');\r\n            this.itemsToSubmitSelect.appendChild(optionItem);\r\n        }\r\n    };\r\n\r\n    handleDeleteSelectedItem(e) {\r\n        if (e.target.matches('button > .svg-close') || e.target.matches('button > .svg-close > path')) {\r\n            const selItmDiv = e.target.closest(`#${this.config.container} .c-select .selected-items > div`);\r\n            selItmDiv.remove();\r\n\r\n            const optionToDelete = this.itemsToSubmitSelect.querySelector(\r\n                `option[value=\"${selItmDiv.textContent.trim()}\"]`,\r\n            );\r\n\r\n            const deletedItem = [...this.getDropdownListItems()].find(item => {\r\n                return item.textContent.trim() === selItmDiv.textContent.trim();\r\n            });\r\n\r\n            deletedItem.classList.remove('d-none');\r\n            optionToDelete.remove();\r\n        }\r\n\r\n        this.setSelectedItemsDivMsg();\r\n    };\r\n\r\n    setInvalid(elemHidden, elemVisible, elemLabel) {\r\n        elemLabel.classList.add('text-danger');\r\n        elemHidden.classList.add('is-invalid');\r\n        elemVisible.classList.add('border-2', 'border-danger');\r\n        elemVisible.classList.remove('border-dark');\r\n    };\r\n\r\n    setValid(elemHidden, elemVisible, elemLabel) {\r\n        elemLabel.classList.remove('text-danger');\r\n        elemHidden.classList.remove('is-invalid');\r\n        elemVisible.classList.remove('border-2', 'border-danger');\r\n        elemVisible.classList.add('border-dark');\r\n    };\r\n\r\n    isValidated(elem, label) {\r\n        if (!elem.checkValidity()) {\r\n            this.setInvalid(this.itemsToSubmitSelect, this.selectedItemsDiv, label);\r\n        }else {\r\n            this.setValid(this.itemsToSubmitSelect, this.selectedItemsDiv, label);\r\n        }\r\n    }\r\n\r\n    setEventListeners() {\r\n        const commoditiesSearchField = document.querySelector(`#${this.config.search}`);\r\n        const dropdownList = document.querySelector(`#${this.config.container} .c-list`);\r\n\r\n        commoditiesSearchField.addEventListener('input', (e) => this.handleDropdownInput(e));\r\n        this.selectedItemsDiv.addEventListener('click', (e) => this.handleDeleteSelectedItem(e));\r\n        dropdownList.addEventListener('click', (e) => this.handleDropdownItemClick(e));\r\n\r\n        this.form.addEventListener(\"submit\", () => this.isValidated(this.itemsToSubmitSelect, this.label));\r\n    };\r\n\r\n    getDropdownListItems() {\r\n        return document.querySelectorAll(`#${this.config.search} + ul > .dropdown-item`);\r\n    };\r\n\r\n    setSelectedItemsDivMsg() {\r\n        const selectedItems = this.selectedItemsDiv.querySelectorAll('div');\r\n\r\n        if (selectedItems.length === 0) {\r\n            this.selectedItemsDiv.textContent = this.config.placeholder;\r\n        }\r\n    };\r\n}\r\n"]}